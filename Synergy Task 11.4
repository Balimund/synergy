import numpy as np
from concurrent.futures import ThreadPoolExecutor

def multiply_matrices_part(A, B, start, end, result):
    for i in range(start, end):
        for j in range(len(B[0])):
            result[i][j] = sum(A[i][k] * B[k][j] for k in range(len(A[0])))

def multiply_matrices_parallel(A, B, num_threads):
    num_rows_A, num_cols_A = len(A), len(A[0])
    num_rows_B, num_cols_B = len(B), len(B[0])

    if num_cols_A != num_rows_B:
        raise ValueError("The number of columns of A must be equal to the number of rows of B.")

    result = np.zeros((num_rows_A, num_cols_B), dtype=int)
    chunk_size = num_rows_A // num_threads

    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        futures = []
        for i in range(num_threads):
            start = i * chunk_size
            end = start + chunk_size if i < num_threads - 1 else num_rows_A
            futures.append(executor.submit(multiply_matrices_part, A, B, start, end, result))

        for future in futures:
            future.result()

    return result

# Пример использования:
A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([[7, 8], [9, 10], [11, 12]])

result = multiply_matrices_parallel(A, B, num_threads=2)
print(result)
